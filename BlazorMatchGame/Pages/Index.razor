@page "/"
@using System.Timers 

<PageTitle>Index</PageTitle>

<style>
    .container {
        width:  400px;
    }

    button {
        width:  100px;
        height:  100px;
        font-size:  50px;
    }
</style>

<div class="container">
    <div class="row">

        var animal 


        @for (var animalNumber = 0; animalNumber < shuffledAnimals.Count; animalNumber++)
        {
            var animal = shuffledAnimals[animalNumber];
            var uniqueDescription = $"{animalNumber}";
            int index = 0;

                // Requirement A: Below is the change in background color (@Setbanground)
            <div class="col-3">
                <button @onclick="@(() => { ButtonClick(animal, uniqueDescription); ButtonClicked(index);})"
                        type="button" class="btn btn-outline-dark" style="background-color:@Setbackground">
                    <h1> <span hidden="@(!clickedButtons.Contains(index))">@animal</span></h1>
                </button>
            </div>




           
        }
        
    </div>
    <div class="row">
        <h2>Matches found: @matchesFound</h2>
    </div>
    <div class="row">

        <h2>Guesses per animal: @Guesses</h2>
    </div>
    <div class="row">
        
        <div class="col-3">
            <button button name="SetGuessButton1" type="button" class="btn btn-outline-dark" @onclick="SetGuess1"
                    style="background-color:red"><h1>1</h1></button>
        </div>
        <div class="col-3">
            <button type="button" class="btn btn-outline-dark" @onclick="SetGuess2" style="background-color:orange"><h1>2</h1></button>
        </div>
        <div class="col-3">
            <button type="button" class="btn btn-outline-dark" @onclick="SetGuess3" style="background-color:yellow"><h1>3</h1></button>
        </div>
        <div class="col-3">
            <button type="button" class="btn btn-outline-dark" @onclick="SetGuess4" style="background-color:green"><h1>4</h1></button>
        </div>
            </div>
        </div>


@code
{
   
    public int Guesses { get; set; } = 4;
    public string Setbackground { get; set; } = "green";
    List<int> clickedButtons = new List<int>();

    List<string> animalEmoji = new List<string>()
    {
        "🐶", "🐶",
        "🐺", "🐺",
        "🐮", "🐮",
        "🦊", "🦊",
        "🐱", "🐱",
        "🦁", "🦁",
        "🐯", "🐯",
        "🐹", "🐹",
    };

    List<string> shuffledAnimals = new List<string>()
     {
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
    };

    int matchesFound = 0;


    protected override void OnInitialized()
    {

        SetUpGame();

    }

    private void SetUpGame()
    {
        Random random = new Random();
        shuffledAnimals = animalEmoji
        .OrderBy(item => random.Next())
        .ToList();
        matchesFound = 0;
    }

    string lastAnimalFound = string.Empty;
    string lastDescription = string.Empty;


    private void ButtonClick(string animal, string animalDescription)
    {



        if (lastAnimalFound == string.Empty)
        {
            // First selection of the pair. Remember it.

            lastAnimalFound = animal;
            lastDescription = animalDescription;
            Guesses--;


        }
        else if ((lastAnimalFound == animal) && (animalDescription != lastDescription))
        {
            // Match found! Reset for next pair.
            lastAnimalFound = string.Empty;

            // Replace found animals with empty string to hide them.
            shuffledAnimals = shuffledAnimals
                .Select(a => a.Replace(animal, string.Empty))
                .ToList();

            matchesFound++;

            if (matchesFound == 8)
            {
                // add way to ask player to play again.

                SetUpGame();
            }
        }
        else
        {
            // User selected a pair that does't match.
            // Reset selection.
            lastAnimalFound = string.Empty;
        }
    }

    // Requirement A: Below is the change in background color (@Setbanground)
    // Requirement B: Below is the change in background color and number of guesses (Guesses & Setbanground).  Multiple buttons are set starting on line 48.
    public void SetGuess1()
    {
        Guesses = 1;
        Setbackground = "red";

    }

    public void SetGuess2()
    {
        Guesses = 2;
        Setbackground = "orange";

    }

    public void SetGuess3()
    {
        Guesses = 3;
        Setbackground = "yellow";

    }

    public void SetGuess4()
    {
        Guesses = 4;
        Setbackground = "green";

    }

    // Requirement C: This method adds to a short index which is connected to a "hidden" variable in the buttons.
    public void ButtonClicked(int index)
    {
        clickedButtons.Add(index);
        Task.Delay(1000);

        if (clickedButtons.Count == 2)
        {
            clickedButtons.Clear();
            StateHasChanged();
        }
    }
}




}